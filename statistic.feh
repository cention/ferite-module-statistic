uses 'console';
uses 'date';
uses 'reflection';

/**
 * @namespace Statistic
 * @brief Contains classes for working with statistics especially the Cention Reports system
 */
namespace Statistic {
	/**
	 * @class Timeframe
	 * @brief A timeframe with a start time and and an end time
	 */
	class Timeframe {
		/**
		 * @variable start
		 * @type number
		 * @brief The timestamp representing the start of the timeframe
		 */
		number start;
		
		/**
		 * @variable end
		 * @type number
		 * @brief The timestamp object representing the end of the timeframe
		 */
		number end;
		
		/**
		 * @function constructor
		 * @declaration function constructor( number start, number end )
		 * @brief Creates a new Timeframe object with a timestamp as start and a timestamp as end
		 * @param number start unix timestamp that should be the start of the timeframe
		 * @param number end unix timestamp that should be the end of the timeframe
		 */
		function constructor( number start, number end ) {
			.start = start;
			.end = end;
		}
		
		/**
		 * @function constructor
		 * @declaration function constructor( string start, string end )
		 * @brief Creates a new Timeframe object with a string as start and a string as end
		 * @param string start string looking like YEAR-MONTH-DAY
		 * @param string end string looking like YEAR-MONTH-DAY
		 */
		function constructor( string start, string end ) {
			.start = Date.parse( start, "%F %T" ).time();
			.end = Date.parse( end, "%F %T" ).time();
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class Time
	 * @brief Base class for all relative times
	 */
	class Time {
		string name;
		number seconds;
		
		function constructor( string name, number seconds ) {
			.name = name;
			.seconds = seconds;
		}
		
		/**
		 * @function length
		 * @declaration function length( number seconds )
		 * @brief Calculate how many this Time happened during seconds
		 * @param number seconds the number of seconds
		 * @return The number of this Time that are elapsed during the seconds
		 */
		function length( number seconds ) {
			return ( seconds / .seconds ).round();
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class view
	 * @brief The base class for all statistic views
	 */
	abstract class View {
		object timeframe;
		array areas;
		array operators;
		
		function setTimeframe( object timeframe )
			.timeframe = timeframe;
		
		function setTimeframe( number start, number end )
			.timeframe = new Statistic.Timeframe( start, end );
		
		function addArea( number id )
			areas[] = name;
		
		function setAreas( array areas )
			.areas = areas;
		
		function addOperator( number id )
			.operators[] = id;
		
		function setOperators( array operators )
			.operators = operators;
		
		function isTimeView
			return false;

	}
	/**
	 * @end
	 */
	
	/**
	 * @class TimeView
	 * @extends Statistic.View
	 * @brief Base class for a statistic options dealing with time
	 */
	abstract class TimeView extends View {
		object outputTime;
		
		function setOutputTime( object outputTime )
			.outputTime = outputTime;
		
		function isTimeView
			return true;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class AbsoluteTimeView
	 * @extends Statistic.TimeView
	 * @brief Displays values based on at what time a timestamp occurred
	 */
	abstract class AbsoluteTimeView extends TimeView {
		function isAbsoluteTimeView
			return true;
		
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array with the data
		 */
		function getData() {
			array rawData = [];
			array data = [];
			
			if( .timeframe and .outputTime )
				rawData = .fetchData( .timeframe );
			
			rawData.map() using ( key, value ) {
				data[] = [ 'key' => [ 'Time' => key ], 'value' => [ 'Email' => value ] ];
			};
			
			data = data.sort() using ( a, b ) {
				number aTimestamp = .outputTime.toTimestamp( a['key'][0] );
				number bTimestamp = .outputTime.toTimestamp( b['key'][0] );
				
				if( aTimestamp < bTimestamp )
					return -1;
				
				if( aTimestamp == bTimestamp )
					return 0;
				
				if( aTimestamp > bTimestamp )
					return 1;
			};
			
			return data;
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class RelativeTimeView
	 * @extends Statistic.TimeView
	 * brief Displays values based on how long time a timestamp represents
	 */
	abstract class RelativeTimeView extends TimeView {
		function isAbsoluteTimeView
			return false;
		
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array with the data
		 */
		function getData() {
			array rawData1 = [];
			array rawData2 = [];
			array data = [];
			
			if( .timeframe )
				rawData1 = .fetchData( .timeframe );
			
			rawData1.map() using ( key, value ) {
				string time = "" + .outputTime.length( key.toNumber() );
				
				if( not rawData2.keyExists( time ) )
					rawData2[time] = value;
				
				rawData2[time] += value;
			};
			
			rawData2.map() using ( key, value ) {
				data[] = [ 'key' => [ .outputTime.name => key ],
				           'value' => [ 'Email' => value ]
				         ];
			};
			
			data = data.sort() using ( a, b ) {
				number aTime = a['key'][0].toNumber();
				number bTime = b['key'][0].toNumber();
				
				if( aTime < bTime )
					return -1;
				
				if( aTime == bTime )
					return 0;
				
				if( aTime > bTime )
					return 1;
			};
			
			return data;
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class ActionView
	 * @extends Statistic.View
	 * @brief Displays how many times a list of actions occurred
	 */
	abstract class ActionView extends View {
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array with the data
		 */
		function getData() {
			array rawData = [];
			array data = [];
			
			if( .timeframe )
				rawData = .fetchData( .timeframe );
			
			rawData.map() using ( key, value ) {
				data[] = [ 'key' => [ 'Action' => key ], 'value' => [ 'Email' => value ] ];
			};
			
			return data;
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class AreaView
	 * @extends Statistic.View
	 */
	abstract class AreaView extends View {
		string key = "Area";
		
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array with the data
		 */
		function getData() {
			array rawData = [];
			array data = [];
			
			if( .timeframe )
				rawData = .fetchData( .timeframe );
			
			rawData.map() using ( key, value ) {
				data[] = [ 'key' => [ .key => key ], 'value' => [ 'Email' => value ] ];
			};
			
			data = data.sort() using ( a, b ) {
				return a['key'][0].orderedCompare( b['key'][0] );
			};
			
			return data;
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class AreaTimeView
	 * @extends Statistic.TimeView
	 */
	abstract class AreaRelativeTimeView extends RelativeTimeView {
		string key = "Area";
			
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array with the data
		 */
		function getData() {
			array rawData = [];
			array data = [];
			
			if( .timeframe )
				rawData = .fetchData( .timeframe );
			
			rawData.map() using ( key, value ) {
				data[] = [ 'key' => [ .key => key ], 'value' => [ .outputTime.name => .outputTime.length( value ) ] ];
			};
			
			data = data.sort() using ( a, b ) {
				return a['key'][0].orderedCompare( b['key'][0] );
			};
			
			return data;
		}
	}
	
	/**
	 * @class OperatorView
	 * @extends Statistic.View
	 * @brief Displays values divided into list of operators
	 */
	abstract class OperatorView extends AreaView {
		string key = "Operator";
		
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array with the data
		 */
	}
	/**
	 * @end
	 */
	
	/**
	 * @class OperatorTimeView
	 * @extends Statistic.AreaTimeView
	 */
	abstract class OperatorRelativeTimeView extends AreaRelativeTimeView {
		string key = "Operator";
		
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array with the data
		 */
	}
	/**
	 * @end
	 */
}
/**
 * @end
 */

