uses 'console';
uses 'date';
uses 'reflection';

/**
 * @namespace Statistic
 * @brief Contains classes for working with statistics especially the Cention Reports system
 */
namespace Statistic {
	/**
	 * @class Timeframe
	 * @brief A timeframe with a start time and and an end time
	 */
	class Timeframe {
		/**
		 * @variable start
		 * @type number
		 * @brief The timestamp representing the start of the timeframe
		 */
		number start;
		
		/**
		 * @variable end
		 * @type number
		 * @brief The timestamp object representing the end of the timeframe
		 */
		number end;
		
		/**
		 * @function constructor
		 * @declaration function constructor( number start, number end )
		 * @brief Creates a new Timeframe object with a timestamp as start and a timestamp as end
		 * @param number start unix timestamp that should be the start of the timeframe
		 * @param number end unix timestamp that should be the end of the timeframe
		 */
		function constructor( number start, number end ) {
			.start = start;
			.end = end;
		}
		
		/**
		 * @function constructor
		 * @declaration function constructor( string start, string end )
		 * @brief Creates a new Timeframe object with a string as start and a string as end
		 * @param string start string looking like YEAR-MONTH-DAY
		 * @param string end string looking like YEAR-MONTH-DAY
		 */
		function constructor( string start, string end ) {
			.start = Date.parse( start, "%F %T" ).time();
			.end = Date.parse( end, "%F %T" ).time();
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class TimeFromat
	 * @brief Base class for Timeformat
	 */
	abstract class Timeformat {
		object previousTimeformat;
		
		/**
		 * @function constructor
		 * @declaration function constructor( object nextTimeformat )
		 * @brief Create a new Timeformat that decorates another Timeformat
		 * @param object previousTimeformat the Timeformat to decorate
		 */
		function constructor( object previousTimeformat )
			.previousTimeformat = previousTimeformat;
		
		function setPreviousTimeformat( object previousTimeformat )
			.previousTimeformat = previousTimeformat;
		
		/**
		 * @function get
		 * @declaration function get()
		 * @brief Get the format
		 * @return The format as a string
		 */
		function get() {
			if( .previousTimeformat )
				return .format + ' ' + .previousTimeformat.get();
			else
				return .format;
		}
		
		/**
		 * @function toString
		 * @declaration function toString()
		 * @brief Output Timeformat as a string based on a timestamp
		 * @param number timestamp the timestamp to base the output on
		 * @return The timestamp as a string
		 */
		function toString( number timestamp ) {
			object date = Date.date( timestamp );
			string text = date.format( .format );
			
			if( .previousTimeformat )
				text += " " + .previousTimeformat.toString( timestamp );
			
			return text;
		}
		
		/**
		 * @function fromString
		 * @declaration function fromString( string time )
		 * @brief Convert a string into a timestamp
		 * @param string time the time string to convert the timestamp to
		 * @return The time as a timestamp number
		 */
		function fromString( string time ) {
			object timeformat = .previousTimeformat;
			string format = .format;

			while( timeformat ) {
				format += " " + timeformat.format;
				timeformat = timeformat.previousTimeformat;
			}
			
			return Date.parse( time, format ).time();
		}
		
		/**
		 * @function length
		 * @declaration function length( number seconds )
		 * @brief Calculate how many Timeformat happened during seconds
		 * @param number seconds the number of seconds
		 * @return The number of Timeformat types that are elapsed during the seconds
		 */
		function length( number seconds ) {
			return ( seconds / .seconds ).round();
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class YearFormat
	 * @extends Statistic.Timeformat
	 * @brief A Timeformat representing a year
	 */
	class YearFormat extends Timeformat {
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%Y";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of an year in seconds
		 */
		number seconds = 31536000;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class MonthFormat
	 * @extends Statistic.Timeformat
	 * @brief A Timeformat representing a month
	 */
	class MonthFormat extends Timeformat {
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%B";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of a month in seconds
		 */
		number seconds = 2592000;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class WeekFormat
	 * @extends Statistic.Timeformat
	 * @brief A Timeformat representing a week
	 */
	class WeekFormat extends Timeformat {
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%V";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of a week in seconds
		 */
		number seconds = 604800;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class WeekdayFormat
	 * @extends Statistic.Timeformat
	 */
	class WeekdayFormat extends Timeformat {
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%A";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of a weekday in seconds
		 */
		number seconds = 86400;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class DayFormat
	 * @extends Statistic.Timeformat
	 * @brief A Timeformat representing a day
	 */
	class DayFormat extends Timeformat {
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%F";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of a day in seconds
		 */
		number seconds = 86400;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class HourFormat
	 * @extends Statistic.Timeformat
	 * @brief A Timeformat representing an hour
	 */
	class HourFormat extends Timeformat {
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%H";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of an hour in seconds
		 */
		number seconds = 3600;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class MinuteFormat
	 * @extends Statistic.Timeformat
	 * @brief A Timeformat representing a minute
	 */
	class MinuteFormat extends Timeformat {
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%M";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of a minute in seconds
		 */
		number seconds = 60;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class SecondTimeformat
	 * @extends Statistic.Timeformat
	 * @brief A Timeformat representing a second
	 */
	class SecondFormat extends Timeformat {
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%S";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of a second in seconds
		 */
		number seconds = 1;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class view
	 * @brief The base class for all statistic views
	 */
	abstract class View {
		object timeframe;
		
		function setTimeframe( object timeframe )
			.timeframe = timeframe;
		
		function setTimeframe( number start, number end )
			.timeframe = new Statistic.Timeframe( start, end );
	}
	/**
	 * @end
	 */
	
	/**
	 * @class TimeView
	 * @extends Statistic.View
	 * @brief Base class for a statistic options dealing with time
	 */
	abstract class TimeView extends View {
		object timeformat;
		
		/**
		 * @function constructor
		 * @declaration function constructor()
		 * @brief Creates a new TimeView with default values
		 */
		function constructor()
			.timeformat = new Statistic.HourFormat();
		
		function setTimeformat( object timeformat )
			.timeformat = timeformat;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class AbsoluteTimeView
	 * @extends Statistic.TimeView
	 * @brief Displays values based on at what time a timestamp occurred
	 */
	abstract class AbsoluteTimeView extends TimeView {
		boolean timeformatSet = false;
		
		function addTimeformat( object timeformat ) {
			if( not .timeformatSet ) {
				.timeformat = null;
				.timeformatSet = true;
			}	
			if( .timeformat ) {
				timeformat.setPreviousTimeformat( .timeformat );
				.timeformat = timeformat;
			} else
				.timeformat = timeformat;
		}
		
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array with the data
		 */
		function getData() {
			array rawData = [];
			array data = [];
			
			if( .timeframe )
				rawData = .fetchData( .timeframe );
			
			rawData.map() using ( key, value ) {
				data[] = [ 'key' => key, 'value' => value ];
			};
			
			data = data.sort() using ( a, b ) {
				number aTimestamp = .timeformat.fromString( a['key'] );
				number bTimestamp = .timeformat.fromString( b['key'] );
				
				if( aTimestamp < bTimestamp )
					return -1;
				
				if( aTimestamp == bTimestamp )
					return 0;
				
				if( aTimestamp > bTimestamp )
					return 1;
			};
			
			return data;
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class RelativeTimeView
	 * @extends Statistic.TimeView
	 * brief Displays values based on how long time a timestamp represents
	 */
	abstract class RelativeTimeView extends TimeView {
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array with the data
		 */
		function getData() {
			array rawData1 = [];
			array rawData2 = [];
			array data = [];
			
			if( .timeframe )
				rawData1 = .fetchData( .timeframe );
			
			rawData1.map() using ( key, value ) {
				string time = "" + .timeformat.length( key.toNumber() );
				
				if( not rawData2.keyExists( time ) )
					rawData2[time] = value;
				
				rawData2[time] += value;
			};
			
			rawData2.map() using ( key, value ) {
				data[] = [ 'key' => key, 'value' => value ];
			};
			
			data = data.sort() using ( a, b ) {
				number aTime = a['key'].toNumber();
				number bTime = b['key'].toNumber();
				
				if( aTime < bTime )
					return -1;
				
				if( aTime == bTime )
					return 0;
				
				if( aTime > bTime )
					return 1;
			};
			
			return data;
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class ActionView
	 * @extends Statistic.View
	 * @brief Displays how many times a list of actions occurred
	 */
	abstract class ActionView extends View {
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array with the data
		 */
		function getData() {
			array rawData = [];
			array data = [];
			
			if( .timeframe )
				rawData = .fetchData( .timeframe );
			
			rawData.map() using ( key, value ) {
				data[] = [ 'key' => key, 'value' => value ];
			};
			
			return data;
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class AreaView
	 * @extends Statistic.View
	 */
	abstract class AreaView extends View {
		array areas;
		
		function addArea( string name )
			areas[] = name;
		
		function setAreas( array areas )
			.areas = areas;
		
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array with the data
		 */
		function getData() {
			array rawData = [];
			array data = [];
			
			if( .timeframe )
				rawData = .fetchData( .timeframe );
			
			rawData.map() using ( key, value ) {
				data[] = [ 'key' => key, 'value' => value ];
			};
			
			data = data.sort() using ( a, b ) {
				return a['key'].orderedCompare( b['key'] );
			};
			
			return data;
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class AreaTimeView
	 * @extends Statistic.TimeView
	 */
	abstract class AreaTimeView extends TimeView {
		array areas;
		
		function addArea( string name )
			areas[] = name;
		
		function setAreas( array areas )
			.areas = areas;
		
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array with the data
		 */
		function getData() {
			array rawData = [];
			array data = [];
			
			if( .timeframe )
				rawData = .fetchData( .timeframe );
			
			rawData.map() using ( key, value ) {
				data[] = [ 'key' => key, 'value' => .timeformat.length( value ) ];
			};
			
			data = data.sort() using ( a, b ) {
				return a['key'].orderedCompare( b['key'] );
			};
			
			return data;
		}
	}
	
	/**
	 * @class OperatorView
	 * @extends Statistic.View
	 * @brief Displays values divided into list of operators
	 */
	abstract class OperatorView extends AreaView {
		array operators;
		
		function addOperator( string name )
			.operators[] = name;
		
		function setOperators( array operators )
			.operators = operators;
		
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array with the data
		 */
	}
	/**
	 * @end
	 */
	
	/**
	 * @class OperatorTimeView
	 * @extends Statistic.AreaTimeView
	 */
	abstract class OperatorTimeView extends AreaTimeView {
		array operators;
		
		function addOperator( string name )
			.operators[] = name;
		
		function setOperators( array operators )
			.operators = operators;
		
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array with the data
		 */
	}
	/**
	 * @end
	 */
}
/**
 * @end
 */

