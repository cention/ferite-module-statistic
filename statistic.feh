uses 'console';
uses 'date';
uses 'reflection';

/**
 * @namespace Statistic
 * @brief Contains classes for working with statistics especially the Cention Reports system
 */
namespace Statistic {
	/**
	 * @class Timeframe
	 * @brief A timeframe with a start time and and an end time
	 */
	class Timeframe {
		/**
		 * @variable start
		 * @type number
		 * @brief The timestamp representing the start of the timeframe
		 */
		number start;
		
		/**
		 * @variable end
		 * @type number
		 * @brief The timestamp object representing the end of the timeframe
		 */
		number end;
		
		/**
		 * @function constructor
		 * @declaration function constructor( number start, number end )
		 * @brief Creates a new Timeframe object with a timestamp as start and a timestamp as end
		 * @param number start unix timestamp that should be the start of the timeframe
		 * @param number end unix timestamp that should be the end of the timeframe
		 */
		function constructor( number start, number end ) {
			.start = Date.date( start );
			.end = Date.date( end );
		}
		
		/**
		 * @function constructor
		 * @declaration function constructor( string start, string end )
		 * @brief Creates a new Timeframe object with a string as start and a string as end
		 * @param string start string looking like YEAR-MONTH-DAY
		 * @param string end string looking like YEAR-MONTH-DAY
		 */
		function constructor( string start, string end ) {
			.start = Date.parse( start, "%F" ).time();
			.end = Date.parse( end, "%F" ).time();
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class TimeFromat
	 * @brief Base class for TimeFormat
	 */
	abstract class TimeFormat {
		object previousTimeFormat;
		
		/**
		 * @function constructor
		 * @declaration function constructor( object nextTimeFormat )
		 * @brief Create a new TimeFormat that decorates another TimeFormat
		 * @param object previousTimeFormat the TimeFormat to decorate
		 */
		function constructor( object previousTimeFormat )
			.previousTimeFormat = previousTimeFormat;
		
		/**
		 * @function toString
		 * @declaration function toString()
		 * @brief Output TimeFormat as a string based on a timestamp
		 * @param number timestamp the timestamp to base the output on
		 */
		function toString( number timestamp ) {
			object date = Date.date( timestamp );
			string text = date.format( .format );
			
			if( .previousTimeFormat )
				text += " " + .previousTimeFormat.toString( timestamp );
			
			return text;
		}
		
		function fromString( string time ) {
			object timeFormat = .previousTimeFormat;
			string format = .format;
			
			while( timeFormat ) {
				format += " " + timeFormat.format;
				timeFormat = timeFormat.previousTimeFormat;
			}
			
			return Date.parse( time, format ).time();
		}
		
		/**
		 * @function length
		 * @declaration function length( number seconds )
		 * @brief Calculate how many TimeFormat happened during seconds
		 * @param number seconds the number of seconds
		 */
		function length( number seconds ) {
			return seconds / .seconds;
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class YearFormat
	 * @extends Statistic.TimeFormat
	 * @brief A TimeFormat representing a year
	 */
	class YearFormat extends TimeFormat {
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%Y";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of an year in seconds
		 */
		number seconds = 31536000;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class MonthFormat
	 * @extends Statistic.TimeFormat
	 * @brief A TimeFormat representing a month
	 */
	class MonthFormat extends TimeFormat {
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%B";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of a month in seconds
		 */
		number seconds = 2592000;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class WeekFormat
	 * @extends Statistic.TimeFormat
	 * @brief A TimeFormat representing a week
	 */
	class WeekTimeFormat extends TimeFormat {
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%V";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of a week in seconds
		 */
		number seconds = 604800;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class WeekdayFormat
	 * @extends Statistic.TimeFormat
	 */
	class WeekdayFormat extends TimeFormat {
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%A";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of a weekday in seconds
		 */
		number seconds = 86400;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class DayFormat
	 * @extends Statistic.TimeFormat
	 * @brief A TimeFormat representing a day
	 */
	class DayFormat extends TimeFormat {
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%F";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of a day in seconds
		 */
		number seconds = 86400;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class HourFormat
	 * @extends Statistic.TimeFormat
	 * @brief A TimeFormat representing an hour
	 */
	class HourFormat extends TimeFormat {
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%H";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of an hour in seconds
		 */
		number seconds = 3600;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class MinuteFormat
	 * @extends Statistic.TimeFormat
	 * @brief A TimeFormat representing a minute
	 */
	class MinuteFormat extends TimeFormat {
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%M";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of a minute in seconds
		 */
		number seconds = 60;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class SecondTimeFormat
	 * @extends Statistic.TimeFormat
	 * @brief A TimeFormat representing a second
	 */
	class SecondFormat extends TimeFormat {
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%S";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of a second in seconds
		 */
		number seconds = 1;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class view
	 * @brief The base class for all statistic views
	 */
	abstract class View {
		array timeframes;
		
		/**
		 * @function addTimeframe
		 * @declaration function addTimeframe( object timeframe )
		 * @brief Add a timeframe from a Timeframe object in which values should be fetched
		 * @param object timeframe a Statistic.Timeframe object
		 */
		function addTimeframe( object timeframe )
			.timeframes[] = timeframe;
		
		/**
		 * @function addTimeframe
		 * @declaration function addTimeframe( number start, number end )
		 * @brief Add a timeframe from timestamps in which values should be fetched
		 * @param number start a unix timestamp
		 * @param number end a unix timestamp
		 */
		function addTimeframe( number start, number end )
			.timeframes[] = new Statistic.Timeframe( start, end );
		
		/**
		 * @function addTimeframe
		 * @declaration function addTimeframe( object start, object end )
		 * @brief Add a timeframe from Date objects in which values should be fetched
		 * @param object start a Date object
		 * @param object end a Date object
		 */
		function addTimeframe( object start, object end )
			.timeframes[] = new Statistic.Timeframe( start, end );
	}
	/**
	 * @end
	 */
	
	/**
	 * @class TimeView
	 * @extends Statistic.View
	 * @brief Base class for a statistic options dealing with time
	 */
	abstract class TimeView extends View {
		object timeFormat;
		
		/**
		 * @function constructor
		 * @declaration function constructor()
		 * @brief Creates a new TimeView with default values
		 */
		function constructor()
			.timeFormat = new Statistic.HourFormat();
		
		function setTimeFormat( object timeFormat )
			.timeFormat = timeFormat;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class AtWhatTimeView
	 * @extends Statistic.TimeView
	 * @brief Displays values based on at what time a timestamp occurred
	 */
	abstract class AbsoluteTimeView extends TimeView {
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array looking like this [ [ 'key' => time =>, 'value' => count ]... ]
		 */
		function getData() {
			array rawData = [];
			array data = [];
			
			rawData = .fetchData();
			
			rawData.each() using ( value ) {
				boolean timeExists = false;
				string time = .timeFormat.toString( value );
				
				for( number i = 0; i < data.size(); i++ ) {
					if( data[i]['key'] == time ) {
						timeExists = true;
						data[i]['value']++;
					}
				}
				
				if( not timeExists ) {
					data[] = [ 'key' => time, 'value' => 1 ];
				}
			};
			
			data = data.sort() using ( a, b ) {
				number aTimestamp = .timeFormat.fromString( a['key'] );
				number bTimestamp = .timeFormat.fromString( b['key'] );
				if( aTimestamp < bTimestamp ) return -1;
				if( aTimestamp == bTimestamp ) return 0;
				if( aTimestamp > bTimestamp ) return 1;
			};
			
			return data;
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class HowLongTimeView
	 * @extends Statistic.TimeView
	 * brief Displays values based on how long time a timestamp represents
	 */
	abstract class RelativeTimeView extends TimeView {
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array looking like this [ [ 'key' => time =>, 'value' => count ]... ]
		 */
		function getData() {
			array rawData = [];
			array data = [];
			
			rawData = .fetchData();
			
			rawData.each() using ( value ) {
				boolean timeExists = false;
				string time = "" + .timeFormat.length( value );
				
				for( number i = 0; i < data.size(); i++ ) {
					if( data[i]['key'] == time ) {
						timeExists = true;
						data[i]['value']++;
					}
				}
				
				if( not timeExists ) {
					data[] = [ 'key' => time, 'value' => 1 ];
				}
			};
			
			data = data.sort() using ( a, b ) {
				number aTime = a['key'].toNumber();
				number bTime = b['key'].toNumber();
				if( aTime < bTime ) return -1;
				if( aTime == bTime ) return 0;
				if( aTime > bTime ) return 1;
			};
			
			return data;
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class ActionView
	 * @extends Statistic.View
	 * @brief Displays how many times a list of actions occurred
	 */
	abstract class ActionView extends View {
		/**
		 * @function getData
		 * @declaration function getData()
		 */
		function getData() {
			array rawData = [];
			array data = [];
			
			rawData = .fetchData();
			
			rawData.each() using ( value ) {
				boolean actionExists = false;
				
				for( number i = 0; i < data.size(); i++ ) {
					if( data[i]['key'] == value ) {
						actionExists = true;
						data[i]['value']++;
					}
				}
				
				if( not actionExists ) {
					data[] = [ 'key' => value, 'value' => 1 ];
				}
			};
			
			return data;
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class OperatorView
	 * @extends Statistic.View
	 * @brief Displays values divided into list of operators
	 */
	abstract class OperatorView extends View {
		/**
		 * @function getData
		 * @declaration function getData()
		 */
		function getData();
	}
	/**
	 * @end
	 */
}
/**
 * @end
 */

