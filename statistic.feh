uses 'console';
uses 'date';
uses 'reflection';

/**
 * @namespace Statistic
 * @brief Contains classes for working with statistics especially the Cention Reports system
 */
namespace Statistic {
	/**
	 * @class Timeframe
	 * @brief A timeframe with a start time and and an end time
	 */
	class Timeframe {
		/**
		 * @variable start
		 * @type number
		 * @brief The timestamp representing the start of the timeframe
		 */
		number start;
		
		/**
		 * @variable end
		 * @type number
		 * @brief The timestamp object representing the end of the timeframe
		 */
		number end;
		
		/**
		 * @function constructor
		 * @declaration function constructor( number start, number end )
		 * @brief Creates a new Timeframe object with a timestamp as start and a timestamp as end
		 * @param number start unix timestamp that should be the start of the timeframe
		 * @param number end unix timestamp that should be the end of the timeframe
		 */
		function constructor( number start, number end ) {
			.start = start;
			.end = end;
		}
		
		/**
		 * @function constructor
		 * @declaration function constructor( string start, string end )
		 * @brief Creates a new Timeframe object with a string as start and a string as end
		 * @param string start string looking like YEAR-MONTH-DAY
		 * @param string end string looking like YEAR-MONTH-DAY
		 */
		function constructor( string start, string end ) {
			.start = Date.parse( start, "%F %T" ).time();
			.end = Date.parse( end, "%F %T" ).time();
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class AbsoluteTimeFromat
	 * @brief Base class for all absolute timeformats
	 */
	abstract class AbsoluteTimeformat {
		object previousTimeformat;
		
		/**
		 * @function constructor
		 * @declaration function constructor( object previousTimeformat )
		 * @brief Create a new Timeformat that decorates another Timeformat
		 * @param object previousTimeformat the Timeformat to decorate
		 */
		function constructor( object previousTimeformat )
			.previousTimeformat = previousTimeformat;
		
		function setPreviousTimeformat( object previousTimeformat )
			.previousTimeformat = previousTimeformat;
		
		/**
		 * @function get
		 * @declaration function get()
		 * @brief Get the format
		 * @return The format as a string
		 */
		function get() {
			if( .previousTimeformat )
				return .format + ' ' + .previousTimeformat.get();
			else
				return .format;
		}
		
		/**
		 * @function toString
		 * @declaration function toString()
		 * @brief Output Timeformat as a string based on a timestamp
		 * @param number timestamp the timestamp to base the output on
		 * @return The timestamp as a string
		 */
		function toString( number timestamp ) {
			object date = Date.date( timestamp );
			string text = date.format( .format );
			
			if( .previousTimeformat )
				text += " " + .previousTimeformat.toString( timestamp );
			
			return text;
		}
		
		/**
		 * @function fromString
		 * @declaration function fromString( string time )
		 * @brief Convert a string into a timestamp
		 * @param string time the time string to convert the timestamp to
		 * @return The time as a timestamp number
		 */
		function fromString( string time ) {
			object timeformat = .previousTimeformat;
			string format = .format;

			while( timeformat ) {
				format += " " + timeformat.format;
				timeformat = timeformat.previousTimeformat;
			}
			
			return Date.parse( time, format ).time();
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class RelativeTimeformat
	 * @brief Base class for all relative timeformats
	 */
	abstract class RelativeTimeformat {
		/**
		 * @function length
		 * @declaration function length( number seconds )
		 * @brief Calculate how many Timeformat happened during seconds
		 * @param number seconds the number of seconds
		 * @return The number of Timeformat types that are elapsed during the seconds
		 */
		function length( number seconds ) {
			return ( seconds / .seconds ).round();
		}
	}
	/**
	 * @end
	 */
	
	class AbsoluteTimeformatSeperator {
		string seperator;
		
		function constructor( string seperator )
			.seperator = seperator;
		
		function set( string seperator )
			.seperator = seperator;
		
		function get
			return .seperator;
	}
	
	class AbsoluteTimeformatGroup {
		array timeformats;
		
		function constructor
			.timeformats = [];
		
		function add( object timeformat )
			.timeformats[] = timeformat;
		
		function get {
			string format;
			.timeformats.each() using ( timeformat ) {
				format += timeformat.get();
			};
			return format;
		}
	}
	
	/**
	 * @class AbsoluteYearFormat
	 * @extends Statistic.AbsoluteTimeformat
	 * @brief An AbsoluteTimeformat representing a year
	 */
	class AbsoluteYearFormat extends AbsoluteTimeformat {
		string name = "Year";
		
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%Y";
	}
	/**
	 * @end
	 */

	/**
	 * @class RelativeYearFormat
	 * @extends Statistic.RelativeTimeformat
	 * @brief A RelativeTimeformat representing a year
	 */
	class RelativeYearFormat extends RelativeTimeformat {
		string name = "Years";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of an year in seconds
		 */
		number seconds = 31536000;
	}
	/**
	 * @end
	 */

	
	/**
	 * @class AbsoluteMonthFormat
	 * @extends Statistic.AbsoluteTimeformat
	 * @brief An AbsoluteTimeformat representing a month
	 */
	class MonthFormat extends AbsoluteTimeformat {
		string name = "Month";
		
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%B";
	}
	/**
	 * @end
	 */
	
	/**
	 * @class RelativeMonthFormat
	 * @extends Statistic.RelativeTimeformat
	 * @brief A RelativeTimeformat representing a month
	 */
	class RelativeMonthFormat extends RelativeTimeformat {
		string name = "Months";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of a month in seconds
		 */
		number seconds = 2592000;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class AbsoluteWeekFormat
	 * @extends Statistic.AbsoluteTimeformat
	 * @brief An AbsoluteTimeformat representing a week
	 */
	class AbsoluteWeekFormat extends AbsoluteTimeformat {
		string name = "Week";
		
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%V";
	}
	/**
	 * @end
	 */
	
	/**
	 * @class RelativeWeekFormat
	 * @extends Statistic.Timeformat
	 * @brief A RelativeTimeformat representing a week
	 */
	class WeekFormat extends RelativeTimeformat {
		string name = "Weeks";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of a week in seconds
		 */
		number seconds = 604800;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class WeekdayFormat
	 * @extends Statistic.AbsoluteTimeformat
	 * @brief An AbsoluteTimeformat representing a weekday.
	 */
	class WeekdayFormat extends AbsoluteTimeformat {
		string name = "Weekday";
		
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%A";
	}
	/**
	 * @end
	 */
	
	/**
	 * @class AbsoluteDayFormat
	 * @extends Statistic.AbsoluteTimeformat
	 * @brief An AbsoluteTimeformat representing a day
	 */
	class AbsoluteDayFormat extends AbsoluteTimeformat {
		string name = "Day";
		
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%F";
	}
	/**
	 * @end
	 */
	
	/**
	 * @class RelativeDayFormat
	 * @extends Statistic.RelativeTimeformat
	 * @brief A RelativeTimeformat representing a day
	 */
	class RelativeDayFormat extends RelativeTimeformat {
		string name = "Days";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of a day in seconds
		 */
		number seconds = 86400;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class AbsoluteHourFormat
	 * @extends Statistic.AbsoluteTimeformat
	 * @brief An AbsoluteTimeformat representing an hour
	 */
	class AbsoluteHourFormat extends AbsoluteTimeformat {
		string name = "Hour";
		
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%H";
	}
	/**
	 * @end
	 */
	
	/**
	 * @class RelativeHourFormat
	 * @extends Statistic.RelativeTimeformat
	 * @brief A RelativeTimeformat representing an hour
	 */
	class RelativeHourFormat extends RelativeTimeformat {
		string name = "Hours";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of an hour in seconds
		 */
		number seconds = 3600;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class AbsoluteMinuteFormat
	 * @extends Statistic.AbsoluteTimeformat
	 * @brief An AbsoluteTimeformat representing a minute
	 */
	class MinuteFormat extends AbsoluteTimeformat {
		string name = "Minute";
		
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%M";
	}
	/**
	 * @end
	 */
	
	/**
	 * @class RelativeMinuteFormat
	 * @extends Statistic.RelativeTimeformat
	 * @brief A RelativeTimeformat representing a minute
	 */
	class RelativeMinuteFormat extends RelativeTimeformat {
		string name = "Minutes";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of a minute in seconds
		 */
		number seconds = 60;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class AbsoluteSecondTimeformat
	 * @extends Statistic.AbsoluteTimeformat
	 * @brief An AbsoluteTimeformat representing a second
	 */
	class AbsoluteSecondFormat extends AbsoluteTimeformat {
		string name = "Second";
		
		/**
		 * @variable format
		 * @type string
		 * @brief The format used when toString() calls format() on the Date object
		          created from the timestamp provided to toString()
		 */
		string format = "%S";
	}
	/**
	 * @end
	 */
	
	/**
	 * @class RelativeSecondTimeformat
	 * @extends Statistic.RelativeTimeformat
	 * @brief A Timeformat representing a second
	 */
	class RelativeSecondFormat extends RelativeTimeformat {
		string name = "Seconds";
		
		/**
		 * @variable seconds
		 * @type number
		 * @brief The length of a second in seconds
		 */
		number seconds = 1;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class view
	 * @brief The base class for all statistic views
	 */
	abstract class View {
		object timeframe;
		array areas;
		array operators;
		
		function setTimeframe( object timeframe )
			.timeframe = timeframe;
		
		function setTimeframe( number start, number end )
			.timeframe = new Statistic.Timeframe( start, end );
		
		function addArea( number id )
			areas[] = name;
		
		function setAreas( array areas )
			.areas = areas;
		
		function addOperator( number id )
			.operators[] = id;
		
		function setOperators( array operators )
			.operators = operators;

	}
	/**
	 * @end
	 */
	
	/**
	 * @class TimeView
	 * @extends Statistic.View
	 * @brief Base class for a statistic options dealing with time
	 */
	abstract class TimeView extends View {
		object timeformat;
		
		function setTimeformat( object timeformat )
			.timeformat = timeformat;
	}
	/**
	 * @end
	 */
	
	/**
	 * @class AbsoluteTimeView
	 * @extends Statistic.TimeView
	 * @brief Displays values based on at what time a timestamp occurred
	 */
	abstract class AbsoluteTimeView extends TimeView {
		boolean timeformatSet = false;
		
		/**
		 * @function constructor
		 * @declaration function constructor()
		 * @brief Creates a new AbsoluteTimeView with default values
		 */
		function constructor()
			.timeformat = new Statistic.AbsoluteHourFormat();
		
		function addTimeformat( object timeformat ) {
			if( not .timeformatSet ) {
				.timeformat = null;
				.timeformatSet = true;
			}	
			if( .timeformat ) {
				timeformat.setPreviousTimeformat( .timeformat );
				.timeformat = timeformat;
			} else
				.timeformat = timeformat;
		}
		
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array with the data
		 */
		function getData() {
			array rawData = [];
			array data = [];
			
			if( .timeframe )
				rawData = .fetchData( .timeframe );
			
			rawData.map() using ( key, value ) {
				data[] = [ 'key' => [ 'Time' => key ], 'value' => [ 'Email' => value ] ];
			};
			
			data = data.sort() using ( a, b ) {
				number aTimestamp = .timeformat.fromString( a['key'][0] );
				number bTimestamp = .timeformat.fromString( b['key'][0] );
				
				if( aTimestamp < bTimestamp )
					return -1;
				
				if( aTimestamp == bTimestamp )
					return 0;
				
				if( aTimestamp > bTimestamp )
					return 1;
			};
			
			return data;
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class RelativeTimeView
	 * @extends Statistic.TimeView
	 * brief Displays values based on how long time a timestamp represents
	 */
	abstract class RelativeTimeView extends TimeView {
		/**
		 * @function constructor
		 * @declaration function constructor()
		 * @brief Creates a new RelativeTimeView with default values
		 */
		function constructor()
			.timeformat = new Statistic.RelativeHourFormat();
		
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array with the data
		 */
		function getData() {
			array rawData1 = [];
			array rawData2 = [];
			array data = [];
			
			if( .timeframe )
				rawData1 = .fetchData( .timeframe );
			
			rawData1.map() using ( key, value ) {
				string time = "" + .timeformat.length( key.toNumber() );
				
				if( not rawData2.keyExists( time ) )
					rawData2[time] = value;
				
				rawData2[time] += value;
			};
			
			rawData2.map() using ( key, value ) {
				data[] = [ 'key' => [ .timeformat.name => key ],
				           'value' => [ 'Email' => value ]
				         ];
			};
			
			data = data.sort() using ( a, b ) {
				number aTime = a['key'][0].toNumber();
				number bTime = b['key'][0].toNumber();
				
				if( aTime < bTime )
					return -1;
				
				if( aTime == bTime )
					return 0;
				
				if( aTime > bTime )
					return 1;
			};
			
			return data;
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class ActionView
	 * @extends Statistic.View
	 * @brief Displays how many times a list of actions occurred
	 */
	abstract class ActionView extends View {
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array with the data
		 */
		function getData() {
			array rawData = [];
			array data = [];
			
			if( .timeframe )
				rawData = .fetchData( .timeframe );
			
			rawData.map() using ( key, value ) {
				data[] = [ 'key' => [ 'Action' => key ], 'value' => [ 'Email' => value ] ];
			};
			
			return data;
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class AreaView
	 * @extends Statistic.View
	 */
	abstract class AreaView extends View {
		string key = "Area";
		
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array with the data
		 */
		function getData() {
			array rawData = [];
			array data = [];
			
			if( .timeframe )
				rawData = .fetchData( .timeframe );
			
			rawData.map() using ( key, value ) {
				data[] = [ 'key' => [ .key => key ], 'value' => [ 'Email' => value ] ];
			};
			
			data = data.sort() using ( a, b ) {
				return a['key'][0].orderedCompare( b['key'][0] );
			};
			
			return data;
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class AreaTimeView
	 * @extends Statistic.TimeView
	 */
	abstract class AreaRelativeTimeView extends RelativeTimeView {
		string key = "Area";
			
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array with the data
		 */
		function getData() {
			array rawData = [];
			array data = [];
			
			if( .timeframe )
				rawData = .fetchData( .timeframe );
			
			rawData.map() using ( key, value ) {
				data[] = [ 'key' => [ .key => key ], 'value' => [ .timeformat.name => .timeformat.length( value ) ] ];
			};
			
			data = data.sort() using ( a, b ) {
				return a['key'][0].orderedCompare( b['key'][0] );
			};
			
			return data;
		}
	}
	
	/**
	 * @class OperatorView
	 * @extends Statistic.View
	 * @brief Displays values divided into list of operators
	 */
	abstract class OperatorView extends AreaView {
		string key = "Operator";
		
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array with the data
		 */
	}
	/**
	 * @end
	 */
	
	/**
	 * @class OperatorTimeView
	 * @extends Statistic.AreaTimeView
	 */
	abstract class OperatorRelativeTimeView extends AreaRelativeTimeView {
		string key = "Operator";
		
		/**
		 * @function getData
		 * @declaration function getData()
		 * @brief Get the data parsed, sorted and ready to be used
		 * @return An array with the data
		 */
	}
	/**
	 * @end
	 */
}
/**
 * @end
 */

