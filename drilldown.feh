uses 'statistic';
uses 'reports';

namespace modifies Statistics {
	namespace DrillDown {
		abstract class Report {
			function getReport() {
				raise new Error('Function getReport() has not been implemented.');
			}

			function loadErrands( string groupName, number startTime, number endTime, number channelID,
				number organisationID, number areaID, number userID )
			{
				object key = .getReport();
				string query;
				string columnTime = 'timestamparrive';
				string columnTimeName = I('Arrived');
				array rows;
				array items;

				if( key instanceof Reports.IncomingErrands ) {
				    columnTime = 'timestamparrive';
				    columnTimeName = I('Arrived');
				} else if( key instanceof Reports.ClosedErrands ) {
					columnTime = 'timestampclosed';
					columnTimeName = I('Closed');
				}

				query = "SELECT workflow_errand_id, ${columnTime} FROM workflow_errands " +
					"WHERE ${columnTime} >= ${startTime} AND ${columnTime} <= ${endTime} " +
					"AND service_fkey = ${channelID} AND organisation_fkey = ${organisationID} " +
					"AND targetarea_fkey = ${areaID}" + (userID ? " AND owner_fkey = ${userID}" : "");
				rows = ObjRunObject.rawQuery(query);

				rows.each() using ( row ) {
					items[] = [ 'name' => I('Errand {0}').expand(row['workflow_errand_id']),
					            'value' => formatDateTime(row[columnTime]) ];
				};

				return [
					'group' => I('Errand'),
					'key' => columnTimeName,
					'items' => items,
					'total' => items.size()
				];
			}

			function loadStandard( string groupName, number startTime, number endTime, number channelID,
				number organisationID, number areaID, number userID )
			{
				object report = new Statistics.Report();
				object key = .getReport();
				object group;
				string nextGroupName;

				switch( groupName ) {
					case 'year':         group = new Reports.YearGroup(); nextGroupName = 'month'; break;
					case 'month':        group = new Reports.MonthGroup(); nextGroupName = 'day'; break;
					case 'day':          group = new Reports.DayGroup(); nextGroupName = 'channel'; break;
					case 'channel':      group = new Reports.ChannelGroup(); nextGroupName = 'organisation'; break;
					case 'organisation': group = new Reports.OrganisationGroup(); nextGroupName = 'area'; break;
					case 'area':         group = new Reports.AreaGroup(); nextGroupName = (key instanceof Reports.IncomingErrands ? 'errands' : 'agent'); break;
					case 'agent':        group = new Reports.AgentGroup(); nextGroupName = 'errands'; break;
				}

				report.addKey(key);
				report.addGroup(group);
				report.setStartTime(startTime);
				report.setEndTime(endTime);

				if( channelID ) report.setChannels([ channelID ]);
				if( organisationID ) report.setOrganisations([ organisationID ]);
				if( areaID ) report.setAreas([ areaID ]);
				if( userID ) report.setUsers([ userID ]);

				report.run();

				return [
					'group' => group.name(),
					'key' => key.name(),
					'next' => nextGroupName,
					'items' => report.toDrillDownArray(),
					'total' => report.getTotal(0)
				];
			}

			function loadData( string groupName, number startTime, number endTime, number channelID,
				number organisationID, number areaID, number userID )
			{
				if( groupName == 'errands' )
					return .loadErrands(groupName, startTime, endTime, channelID,
						organisationID, areaID, userID);
				return .loadStandard(groupName, startTime, endTime, channelID,
					organisationID, areaID, userID);
			}

			function loadFirstData() {
				return .loadData('year', 0, Date.GMTnow(), 0, 0, 0, 0);
			}
		}
	}
}

namespace modifies Reports {
	namespace DrillDown {
		class IncomingErrands extends Statistics.DrillDown.Report {
			function getReport() {
				return new Reports.IncomingErrands();
			}
		}
		class ClosedErrands extends Statistics.DrillDown.Report {
			function getReport() {
				return new Reports.ClosedErrands();
			}
		}
	}
}
