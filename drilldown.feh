uses 'statistic';
uses 'reports';

namespace modifies Statistics {
	namespace DrillDown {
		abstract class Report {
			function getReport() {
				raise new Error('Function getReport() has not been implemented.');
			}

			function loadErrands( string groupName, number startTime, number endTime, number channelID,
				number organisationID, number areaID, number userID, number answerOption,
				string timeZoneName )
			{
				object key = .getReport();
				string query;
				string columnTime = 'timestamparrive';
				string columnTimeName = I('Arrived');
				array rows;
				array items;

				if( key instanceof Reports.IncomingErrands ) {
				    columnTime = 'timestamp_arrive';
				    columnTimeName = I('Arrived');
				} else if( key instanceof Reports.ClosedErrands or key instanceof Reports.ClosedErrandsWithReplies 
				or key instanceof Reports.SatisfactionMeter ) {
					columnTime = 'timestamp_close';
					columnTimeName = I('Closed');
				}

				query = "SELECT distinct(workflow_reporterranddatas.errand_id), workflow_reporterranddatas.${columnTime} " +
					"FROM " + key.from() + " " +
					"WHERE workflow_reporterranddatas.${columnTime} >= ${startTime} " +
					"AND workflow_reporterranddatas.${columnTime} <= ${endTime} " +
					"AND workflow_reporterranddatas.service_id = ${channelID} " +
					"AND workflow_reporterranddatas.organisation_id = ${organisationID} " +
					"AND workflow_reporterranddatas.area_id = ${areaID}" +
					(key instanceof Reports.SatisfactionMeter ? " AND workflow_feedbacks.feedback = ${answerOption}" : "") +
					(userID ? " AND workflow_reporterranddatas.user_id = ${userID}" : "") +
					(key.where() ? " AND " + key.where() : "");
				rows = ObjRunObject.rawQuery(query);

				rows.each() using ( row ) {
					items[] = [
						'name' => I('Errand {0}').expand(row['errand_id']),
						'value' => formatDateTimeTZ(row[columnTime],
									timeZoneName),
						'errand' => true,
						'id' => row['errand_id'],
						'answerOption' => answerOption
					];
				};

				return [
					'group' => I('Errand'),
					'key' => columnTimeName,
					'items' => items,
					'total' => items.size()
				];
			}

			function loadStandard( string groupName, number startTime, 
				number endTime, number channelID,
				number organisationID, number areaID, number userID, number answerOption,
				string timeZoneName )
			{
				object report = new Statistics.Report();
				object key = .getReport();
				object group;
				string nextGroupName;

				array output;

				switch( groupName ) {
					case 'year':         group = new Reports.YearGroup(); nextGroupName = 'month'; break;
					case 'month':        group = new Reports.MonthGroup(); nextGroupName = 'day'; break;
					case 'day':          group = new Reports.DayGroup(); nextGroupName = 'channel'; break;
					case 'channel':      group = new Reports.ChannelGroup(); nextGroupName = 'organisation'; break;
					case 'organisation': group = new Reports.OrganisationGroup(); nextGroupName = 'area'; break;
					case 'area':         group = new Reports.AreaGroup(); nextGroupName = (key instanceof Reports.IncomingErrands ? 'errands' : 'agent'); break;
					case 'agent':        group = new Reports.AgentGroup(); nextGroupName = (key instanceof Reports.SatisfactionMeter ? 'meter' : 'errands'); break;
					case 'meter':        group = new Reports.AnswerGroup(); nextGroupName = 'errands'; break;
				}

				if(timeZoneName.length() > 0){
					report.setTimeZone(timeZoneName);
				}
				report.addKey(key);
				report.addGroup(group);
				report.setStartTime(startTime);
				report.setEndTime(endTime);

				if( channelID ) report.setChannels([ channelID ]);
				if( organisationID ) report.setOrganisations([ organisationID ]);
				if( areaID ) report.setAreas([ areaID ]);
				if( userID ) report.setUsers([ userID ]);
				if( answerOption ) report.setAnswerOption([ answerOption ]);

				if( not report.organisations ) report.setOrganisations(Workflow.SystemGroup.organisationsFromCache(Workflow.SystemGroup.current()));
				if( not report.areas ) report.setAreas(Workflow.SystemGroup.areasFromCache(Workflow.SystemGroup.current()));

				report.run();

				output = [
					'group' => group.name(),
					'key' => key.name(),
					'next' => nextGroupName,
					'items' => report.toDrillDownArray(),
					'total' => report.getTotal(0)
				];

				// Console.printlnErr("(DEBUG) " + output);

				return output;
			}

			function loadData( string groupName, number startTime, number endTime, number channelID,
				number organisationID, number areaID, number userID, number answerOption)
			{
				if( groupName == 'errands' )
					return .loadErrands(groupName, startTime, endTime, channelID, organisationID, areaID, userID, answerOption, '');
				return .loadStandard(groupName, startTime, endTime, channelID, organisationID, areaID, userID, answerOption, '');
			}

			function loadData( string groupName, number startTime, 
							number endTime, number channelID,
							number organisationID, number areaID, 
							number userID, number answerOption, string timeZoneName )
			{
				if( groupName == 'errands' )
					return .loadErrands(groupName, startTime, endTime, channelID, organisationID, areaID, userID, answerOption, timeZoneName);
				return .loadStandard(groupName, startTime, endTime, channelID, organisationID, areaID, userID, answerOption, timeZoneName);
			}

			function loadFirstData() {
				return .loadData('year', 0, Date.now(), 0, 0, 0, 0,0);
			}

			function loadFirstData(string timeZone) {
				return .loadData('year', 0, Date.GMTnow(), 0, 0, 0, 0,0,timeZone);
			}
		}
	}

	class modifies Report {
		function toDrillDownArray() {
			number first = 0;
			string keyName = 'key_' + .keys[first].identifier();
			object group = .groups[first];
			string groupName = group.groupName();
			number size = .result.size();
			array items = [];

			for( number i = 0; i < size; ++i ) {
				array item = [ 'name' => .result[i][groupName],
				               'value' => .result[i][keyName],
				               'start' => .startTime,
				               'end' => .endTime ];

				if( .channels ) item['channel'] = .channels[0];
				if( .organisations ) item['organisation'] = .organisations[0];
				if( .areas ) item['area'] = .areas[0];
				if( .users ) item['user'] = .users[0];
				if( .answerOption ) item['answerOption'] = .answerOption[0];

				if( group.getClass().conformsToProtocol(Statistics.DateTimeGroup) ) {
					item['start'] = group.start(.result[i]['original_' + groupName]);
					item['end'] = group.end(.result[i]['original_' + groupName]);
				} else if( group instanceof Reports.ChannelGroup ) {
					if( .result[i].keyExists('workflow_service_id') )
						item['channel'] = .result[i]['workflow_service_id'];
				} else if( group instanceof Reports.OrganisationGroup ) {
					if( .result[i].keyExists('workflow_organisation_id') )
						item['organisation'] = .result[i]['workflow_organisation_id'];
				} else if( group instanceof Reports.AreaGroup ) {
					if( .result[i].keyExists('workflow_area_id') )
						item['area'] = .result[i]['workflow_area_id'];
				} else if( group instanceof Reports.AgentGroup ) {
					if( .result[i].keyExists('workflow_user_id') )
						item['user'] = .result[i]['workflow_user_id'];
				}
				else if( group instanceof Reports.AnswerGroup ) {
					if( .result[i].keyExists('feedback') )
						item['answerOption'] = .result[i]['feedback'];
				}
				// Console.printlnErr('[DEBUG] -----------------------------------------------------');
				// Console.printlnErr('[DEBUG] Row: ' + .result[i]);
				// Console.printlnErr('[DEBUG] -----------------------------------------------------');
				// Console.printlnErr('[DEBUG] Item: ' + item);
				// Console.printlnErr('[DEBUG] -----------------------------------------------------');

				items[] = item;
			}

			return items;
		}
	}
}

namespace modifies Reports {
	namespace DrillDown {
		class IncomingErrands extends Statistics.DrillDown.Report {
			function getReport() {
				return new Reports.IncomingErrands();
			}
		}
		class ClosedErrands extends Statistics.DrillDown.Report {
			function getReport() {
				return new Reports.ClosedErrands();
			}
		}
		class ClosedErrandsWithReplies extends Statistics.DrillDown.Report {
			function getReport() {
				return new Reports.ClosedErrandsWithReplies();
			}
		}
		class SatisfactionMeter extends Statistics.DrillDown.Report {
			function getReport() {
				return new Reports.SatisfactionMeter();
			}
		}
	}
}
