uses 'console';
uses 'statistic';
uses 'ObjRunSrv';
uses 'objrunsrv-workflow';
uses 'webframework/webframework';

/**
 * @namespace Reports
 * @brief Contains all Cention Reports
 */
namespace Reports {
	class IncomingErrands implements Statistics.KeyFigure {
		function name() return I('Incoming');
		function select() return 'count(workflow_reporterranddatas.errand_id) AS key';
		function from() return 'workflow_reporterranddatas';
		function where() return '';
		function columnOrganisation() return 'workflow_reporterranddatas.organisation_id';
		function columnArea() return 'workflow_reporterranddatas.area_id';
		function columnUser() return 'workflow_reporterranddatas.user_id';
		function columnChannel() return 'workflow_reporterranddatas.service_id';
		function columnTime() return 'workflow_reporterranddatas.timestamp_arrive';
	}

	class ClosedErrands extends IncomingErrands {
		function name() return I('Closed');
		function where() return 'timestamp_close > 0';
		function columnTime() return 'workflow_reporterranddatas.timestamp_close';
	}

	class ClosedErrandsWithReplies extends ClosedErrands {
		function name() return I('Replies');
		function where() return 'timestamp_replied > 0';
	}

	abstract class AverageErrandResponseTime extends ClosedErrands {
		function name() return I('Average response time');
		function select() return 'floor(avg(workflow_reporterranddatas.response_time) / ' + .seconds() + ') AS key';
		function seconds() raise new Error('Function seconds() has not been implemented.');
	}

	class AverageErrandResponseTimeInSeconds extends AverageErrandResponseTime {
		function seconds() return 1;
	}

	class AverageErrandResponseTimeInMinutes extends AverageErrandResponseTime {
		function seconds() return 60;
	}

	class AverageErrandResponseTimeInHours extends AverageErrandResponseTime {
		function seconds() return 3600;
	}

	class AverageErrandResponseTimeInDays extends AverageErrandResponseTime {
		function seconds() return 86400;
	}

	abstract class AverageErrandProcessTime implements Statistics.KeyFigure {
		function name() return I('Average process time');
		function select() return 'floor(avg(workflow_reportuserdatas.process_time) / ' + .seconds() + ') AS key';
		function from() return 'workflow_reportuserdatas';
		function where() return '';
		function columnOrganisation() return 'workflow_reportuserdatas.organisation_id';
		function columnArea() return 'workflow_reportuserdatas.area_id';
		function columnUser() return 'workflow_reportuserdatas.user_id';
		function columnChannel() return 'workflow_reportuserdatas.service_id';
		function columnTime() return 'workflow_reportuserdatas.timestamp_open';
		function seconds() raise new Error('Function seconds() has not been implemented.');
	}

	class AverageErrandProcessTimeInSeconds extends AverageErrandProcessTime {
		function seconds() return 1;
	}

	class AverageErrandProcessTimeInMinutes extends AverageErrandProcessTime {
		function seconds() return 60;
	}

	class AverageErrandProcessTimeInHours extends AverageErrandProcessTime {
		function seconds() return 3600;
	}

	class AverageErrandProcessTimeInDays extends AverageErrandProcessTime {
		function seconds() return 86400;
	}

	abstract class ErrandClosureStatus implements Statistics.KeyFigure {
		function name() raise new Error('Function name() has not been implemented.');
		function select() return 'count(workflow_actions.workflow_action_id) AS key';
		function from() return 'workflow_actions';
		function where() raise new Error('Function where() has not been implemented.');
		function columnOrganisation() return 'workflow_actions.organisation_fkey';
		function columnArea() return 'workflow_actions.area_fkey';
		function columnUser() return 'workflow_actions.origin_fkey';
		function columnChannel() return 'workflow_actions.channel_fkey';
		function columnTime() return 'return workflow_actions.timestampwhen';
	}

	class ErrandClosureStatusAnswered extends ErrandClosureStatus {
		function name() return I('Answered');
		function where() return 'workflow_actions.type IN (3, 19)'; // TODO: Add Resend
	}

	class ErrandClosureStatusDeleted extends ErrandClosureStatus {
		function name() return I('Deleted');
		function where() return 'workflow_actions.type = 7';
	}

	class ErrandClosureStatusReturned extends ErrandClosureStatus {
		function name() return I('Deleted');
		function where() return 'workflow_actions.type = 8';
	}

	class ErrandClosureStatusForwardedToArea extends ErrandClosureStatus {
		function name() return I('Forwarded to area');
		function where() return 'workflow_actions.type = 5';
	}

	class ErrandClosureStatusForwardedToAgent extends ErrandClosureStatus {
		function name() return I('Forwarded to agent');
		function where() return 'workflow_actions.type = 4';
	}
	
	class ErrandClosureStatusMovedToFolder extends ErrandClosureStatus {
		function name() return I('Moved to folder');
		function where() return 'workflow_actions.type = 6';
	}

	class ErrandClosureStatusChatFinished extends ErrandClosureStatus {
		function name() return I('Chat finished');
		function where() return 'workflow_actions.type = 20';
	}

	class ErrandClosureStatusChatExpired extends ErrandClosureStatus {
		function name() return I('Chat expired');
		function where() return 'workflow_actions.type = 21';
	}

	class OrganisationGroup extends Statistics.AbstractGroup implements Statistics.Group {
		function build() return [];
		function name() return I('Organisation');
		function select( object key ) return 'workflow_organisations.workflow_organisation_id, workflow_organisations.name AS ' + .groupName();
		function from() return 'workflow_organisations';
		function where( object key ) return key.columnOrganisation() + ' = workflow_organisations.workflow_organisation_id';
		function groupBy() return 'workflow_organisations.workflow_organisation_id, workflow_organisations.name';
		function orderBy() return 'workflow_organisations.name';
		function extra() return [ 'workflow_organisation_id' ];
	}
	
	class AreaGroup extends Statistics.AbstractGroup implements Statistics.Group {
		function build() return [];
		function name() return I('Area');
		function select( object key ) return 'workflow_areas.workflow_area_id, workflow_areas.name AS ' + .groupName();
		function from() return 'workflow_areas';
		function where( object key ) return key.columnArea() + ' = workflow_areas.workflow_area_id';
		function groupBy() return 'workflow_areas.workflow_area_id, workflow_areas.name';
		function orderBy() return 'workflow_areas.name';
		function extra() return [ 'workflow_area_id' ];
	}

	class AgentGroup extends Statistics.AbstractGroup implements Statistics.Group {
		function build() return [];
		function name() return I('Agent');
		function select( object key ) return 'workflow_users.workflow_user_id, workflow_users.username AS ' + .groupName();
		function from() return 'workflow_users';
		function where( object key ) return key.columnUser() + ' = workflow_users.workflow_user_id';
		function groupBy() return 'workflow_users.workflow_user_id, workflow_users.username';
		function orderBy() return 'workflow_users.username';
		function extra() return [ 'workflow_user_id' ];
	}

	class ChannelGroup extends Statistics.AbstractGroup implements Statistics.Group {
		function build() return .build([ 'Email', 'Manual', 'Chat', 'Facebook', 'Twitter' ]);
		function name() return I('Channel');
		function select( object key ) return 'workflow_services.workflow_service_id, workflow_services.name AS ' + .groupName();
		function from() return 'workflow_services';
		function where( object key ) return key.columnChannel() + ' = workflow_services.workflow_service_id';
		function groupBy() return 'workflow_services.workflow_service_id, workflow_services.name';
		function orderBy() return 'workflow_services.name';
		function extra() return [ 'workflow_service_id' ];
	}

	class YearGroup extends Statistics.AbstractDateTimeGroup implements Statistics.DateTimeGroup {
		function name() return I('Year');
		function feriteFormat() return '%Y';
		function format() return 'YYYY';
		function fields() return [ 'year' ];
		function seconds() return 31536000;
		function start( string year ) return .localDateToGMTtimestamp("${year}-01-01 00:00:00");
		function end( string year ) return .localDateToGMTtimestamp("${year}-12-31 23:59:59");
	}
	
	class MonthGroup extends Statistics.AbstractDateTimeGroup implements Statistics.DateTimeGroup {
		function name() return I('Month');
		function feriteFormat() return '%B';
		function format() return 'Month';
		function fields() return [ 'month' ];
		function seconds() return 2419200;
		function start( string item ) {
			string year = .localYearFromGMTtimestamp(.endTime());
			string month = Date.localParse(item, '%B').format('%m');
			return .localDateToGMTtimestamp("${year}-${month}-01 00:00:00");
		}
		function end( string item ) {
			string year = .localYearFromGMTtimestamp(.endTime());
			string month = Date.localParse(item, '%B').format('%m');
			number y = year.toNumber();
			number m = month.toNumber();
			number day = (m == 2
				? (y % 4
					? 28 :
					(y % 100
						? 29
						: (y % 400
							? 28
							: 29)))
				: ((m - 1) % 7 % 2
					? 30
					: 31));
			return .localDateToGMTtimestamp("${year}-${month}-${day} 23:59:59");
		}
	}

	class DayGroup extends Statistics.AbstractDateTimeGroup implements Statistics.DateTimeGroup {
		function name() return I('Day');
		function feriteFormat() return '%F';
		function format() return 'YYYY-MM-DD';
		function fields() return [ 'year', 'month', 'day' ];
		function seconds() return 86400;
		function start( string day ) return .localDateToGMTtimestamp("${day} 00:00:00");
		function end( string day ) return .localDateToGMTtimestamp("${day} 23:59:59");
	}
}
/**
 * @end
 */

