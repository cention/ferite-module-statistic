uses 'console';
uses 'statistic';
uses 'ObjRunSrv';
uses 'objrunsrv-workflow';

/**
 * @namespace Reports
 * @brief Contains all Cention Reports
 */
namespace Reports {
	string name = "Incoming";
	
	/**
	 * @class IncomingErrands
	 * @extends Statistic.AbsoluteTimeView
	 * @brief Handles data needed for incoming errands statistic view
	 */
	class IncomingErrands extends Statistic.AbsoluteTimeView {
		/**
		 * @function fetchData
		 * @declaration function fetchData( object timeframe )
		 * @brief Fetches data used by the getData() function
		 * @param object timeframe The timeframe in which to fetch values
		 * @returns An array with the data
		 */
		function fetchData( object timeframe ) {
			array email = Workflow.Errand.incomingReport( timeframe.start, timeframe.end, false, .byArea, .areas, .byGroup, .groups, .byAgent, .agents, .outputTime.format() );
			array manual = Workflow.Errand.incomingReport( timeframe.start, timeframe.end, false, .byArea, .areas, .byGroup, .groups, .byAgent, .agents, .outputTime.format() );
			.addDataGroup( 'Email', email );
			.addDataGroup( 'Manual', manual );
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class ClosedErrands
	 * @extends Statistic.AbsoluteTimeView
	 * @brief Handles data needed for closed errands statistic view
	 */
	class ClosedErrands extends Statistic.AbsoluteTimeView {
		string name = "Closed";
		
		/**
		 * @function fetchData
		 * @declaration function fetchData( number timeframeStart, number timeframeEnd )
		 * @brief Fetches data used by the getData() function
		 * @param number timeframeStart the start timestamp for the timeframe
		 * @param number timeframeEnd the end timestamp for the timeframe
		 * @returns An array with the data
		 */
		function fetchData( object timeframe ) {
			array email = Workflow.Errand.closedReport( timeframe.start, timeframe.end, false, .byArea, .areas, .byGroup, .groups, .byAgent, .agents, .outputTime.format() );
			array manual = Workflow.Errand.closedReport( timeframe.start, timeframe.end, false, .byArea, .areas, .byGroup, .groups, .byAgent, .agents, .outputTime.format() );
			.addDataGroup( 'Email', email );
			.addDataGroup( 'Manual', manual );
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class PublishedErrands
	 * @extends Statistic.AbsoluteTimeView
	 * @brief Handles data needed for published errands statistic view
	 */
	class PublishedErrands extends Statistic.AbsoluteTimeView {
		string name = "Published";
		
		/**
		 * @function fetchData
		 * @declaration function fetchData( number timeframeStart, number timeframeEnd )
		 * @brief Fetches data used by the getData() function
		 * @param number timeframeStart the start timestamp for the timeframe
		 * @param number timeframeEnd the end timestamp for the timeframe
		 * @returns An array with the data
		 */
		function fetchData( object timeframe ) {
			array email = Workflow.Errand.publishedReport( timeframe.start, timeframe.end, false, .byArea, .areas, .byGroup, .groups, .byAgent, .agents, .outputTime.format() );
			array manual = Workflow.Errand.publishedReport( timeframe.start, timeframe.end, false, .byArea, .areas, .byGroup, .groups, .byAgent, .agents, .outputTime.format() );
			.addDataGroup( 'Email', email );
			.addDataGroup( 'Manual', manual );
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class ClosedErrandsWithReplies
	 * @extends Statistic.AbsoluteTimeView
	 * @brief Handles data needed for closed errands with replies statistic view
	 */
	// Replies
	class ClosedErrandsWithReplies extends Statistic.AbsoluteTimeView {
		string name = "Replies";
		
		/**
		 * @function fetchData
		 * @declaration function fetchData( number timeframeStart, number timeframeEnd )
		 * @brief Fetches data used by the getData() function
		 * @param number timeframeStart the start timestamp for the timeframe
		 * @param number timeframeEnd the end timestamp for the timeframe
		 * @returns An array with the data
		 */
		function fetchData( object timeframe ) {
			array email = Workflow.Errand.repliesReport( timeframe.start, timeframe.end, false, .byArea, .areas, .byGroup, .groups, .byAgent, .agents, .outputTime.format() );
			array manual = Workflow.Errand.repliesReport( timeframe.start, timeframe.end, false, .byArea, .areas, .byGroup, .groups, .byAgent, .agents, .outputTime.format() );
			.addDataGroup( 'Email', email );
			.addDataGroup( 'Manual', manual );
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class ErrandClosureStatus
	 * @extends Statistic.AgentView
	 * @brief Handles data needed for errand closure status statistic view
	 */
	class ErrandClosureStatus extends Statistic.AgentView {
		string name = "Closure status";
		
		/**
		 * @function fetchData
		 * @declaration function fetchData( number timeframeStart, number timeframeEnd )
		 * @brief Fetches data used by the getData() function
		 * @param number timeframeStart the start timestamp for the timeframe
		 * @param number timeframeEnd the end timestamp for the timeframe
		 * @returns An array with the data
		 */
		function fetchData( object timeframe ) {
			array status = Workflow.Errand.closureStatusReport( timeframe.start, timeframe.end, false, .byArea, .areas, .byGroup, .groups, .byAgent, .agents );
			.addDataGroup( 'Status', status );
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class ErrandResponseTime
	 * @extends Statistic.RelativeTimeView
	 * @brief Handles data needed for response time statistic view
	 */
	class ErrandResponseTime extends Statistic.RelativeTimeView {
		string name = "Response time";
		
		/**
		 * @function fetchData
		 * @declaration function fetchData( number timeframeStart, number timeframeEnd )
		 * @brief Fetches data used by the getData() function
		 * @param number timeframeStart the start timestamp for the timeframe
		 * @param number timeframeEnd the end timestamp for the timeframe
		 * @returns An array with the data
		 */
		function fetchData( object timeframe ) {
			array responseTime = Workflow.Errand.responseTimeReport( timeframe.start, timeframe.end, false, .byArea, .areas, .byGroup, .groups, .byAgent, .agents );
			.addDataGroup( 'ResponseTime', responseTime );

		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class ErrandProcessTime
	 * @extends Statistic.RelativeTimeView
	 * @brief Handles data needed for errand process time statistic view
	 */
	class ErrandProcessTime extends Statistic.RelativeTimeView {
		string name = "Process time";
		
		/**
		 * @function fetchData
		 * @declaration function fetchData( number timeframeStart, number timeframeEnd )
		 * @brief Fetches data used by the getData() function
		 * @param number timeframeStart the start timestamp for the timeframe
		 * @param number timeframeEnd the end timestamp for the timeframe
		 * @returns An array with the data
		 */
		function fetchData( object timeframe ) {
			array processTime = Workflow.Errand.processTimeReport( timeframe.start, timeframe.end, false, .byArea, .areas, .byGroup, .groups, .byAgent, .agents );
			.addDataGroup( 'ProcessTime', processTime );
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class AverageErrandResponseTime
	 * @extendsStatistic.AreaRelativeTimeView
	 * @brief Handles data needed for average errand response time statistic view
	 */
	class AverageErrandResponseTime extends Statistic.AreaRelativeTimeView {
		string name = "Average response time";
		
		/**
		 * @function fetchData
		 * @declaration function fetchData( number timeframeStart, number timeframeEnd )
		 * @brief Fetches data used by the getData() function
		 * @param number timeframeStart the start timestamp for the timeframe
		 * @param number timeframeEnd the end timestamp for the timeframe
		 * @returns An array with the data
		 */
		function fetchData( object timeframe ) {
			array averageResponseTime = Workflow.Errand.averageResponseTimeReport( timeframe.start, timeframe.end, false, .byArea, .areas, .byGroup, .groups, .byAgent, .agents );
			.addDataGroup( 'AverageResponseTime', averageResponseTime );
		}
	}
	/**
	 * @end
	 */
	
	/**
	 * @class AverageErrandProcessTime
	 * @extends Statistic.AgentRelativeTimeView
	 * @brief Handles data needed for average errand process time statistic view
	 */
	class AverageErrandProcessTime extends Statistic.AgentRelativeTimeView {
		string name = "Average process time";
		
		/**
		 * @function fetchData
		 * @declaration function fetchData( number timeframeStart, number timeframeEnd )
		 * @brief Fetches data used by the getData() function
		 * @param number timeframeStart the start timestamp for the timeframe
		 * @param number timeframeEnd the end timestamp for the timeframe
		 * @returns An array with the data
		 */
		function fetchData( object timeframe ) {
			array averageProcessTime = Workflow.Errand.averageProcessTimeReport( timeframe.start, timeframe.end, false, .byArea, .areas, .byGroup, .groups, .byAgent, .agents );
			.addDataGroup( 'AverageProcessTime', averageProcessTime );
		}
	}
	/**
	 * @end
	 */
	
	class ErrandClassification extends Statistic.ActionView {
		string name = "Classification";
		string key = "Classification";
		
		function fetchData( object timeframe ) {
			array classification = Workflow.Errand.classificationReport( timeframe.start, timeframe.end, false, .byArea, .areas, .byGroup, .groups, .byAgent, .agents );
			.addDataGroup( 'Classification', classification );
		}
	}
}
/**
 * @end
 */

